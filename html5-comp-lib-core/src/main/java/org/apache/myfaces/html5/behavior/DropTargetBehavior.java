/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.myfaces.html5.behavior;

import java.util.HashMap;
import java.util.Map;

import javax.el.ValueExpression;
import javax.faces.application.ResourceDependencies;
import javax.faces.application.ResourceDependency;
import javax.faces.context.FacesContext;

import org.apache.myfaces.html5.event.DropEvent;
import org.apache.myfaces.html5.event.DropListener;
import org.apache.myfaces.html5.renderkit.behavior.DropTargetBehaviorRenderer;

//TODO: use the myfaces annotation and fix the template!
//@JSFBehavior(name = "fx:dragTarget", id = "org.apache.myfaces.html5.DragDropTargetBehavior")
//@FacesBehavior(value="org.apache.myfaces.html5.DropTargetBehavior")
/**
 * Provides Html5 drop functionality to its parent.
 * 
 * @author Ali Ok
 * 
 */
@ResourceDependencies(
{
        @ResourceDependency(name = "jsf.js", library = "javax.faces", target = "head"),
        @ResourceDependency(name = "html5.js", library = "myfaces.apache.org", target = "head")
})
public class DropTargetBehavior extends javax.faces.component.behavior.ClientBehaviorBase implements ValueExpressionHolder
{

    public static final String RENDERER_ID = "org.apache.myfaces.html5.DropTargetBehavior";
    
    private static final String ATTR_ACTION = "action";
    private static final String ATTR_TYPES = "types";
    private static final String ATTR_ACCEPT_MIME_TYPES = "acceptMimeTypes";
    private static final String ATTR_RERENDER = "rerender";

    private Map<String, ValueExpression> _valueExpressions = new HashMap<String, ValueExpression>();
    private ClientBehaviorDeltaStateHelper<DropTargetBehavior> deltaStateHelper = new ClientBehaviorDeltaStateHelper<DropTargetBehavior>(this);
    
    /**
     * Adds a {@link DropListener} to notify when a {@link DropEvent} occured. 
     */
    public void addDropTargetBehaviorListener(DropListener listener)
    {
        super.addBehaviorListener(listener);
    }

    /**
     * @see DropTargetBehavior#addBehaviorListener(javax.faces.event.BehaviorListener)
     */
    public void removeDropTargetBehaviorListener(DropListener listener)
    {
        removeBehaviorListener(listener);
    }

    @Override
    public String getRendererType()
    {
        return RENDERER_ID;
    }

    /**
     * Action to allow for drop operation. Can be one of below:
     * <ul>
     * <li>copy: A copy of the source item may be made at the new location.</li>
     * <li>move: An item may be moved to a new location.</li>
     * <li>link: A link may be established to the source at the new location.</li>
     * <li>copyLink: A copy or link operation is permitted.</li>
     * <li>copyMove: A copy or move operation is permitted.</li>
     * <li>linkMove: A link or move operation is permitted.</li>
     * <li>all: All operations are permitted.</li>
     * <li>none: The item may not be dropped.</li>
     * </ul>
     * <br/>
     * 
     * If nothing is specified, any action will be accepted. Action is set by the hx:dragSource behavior, when the
     * element is generated by a MyFaces-Html5 component that has hx:dragSource behavior. For other elements, action is
     * set by the browser, and can be adjusted by pressing the modifier keys.
     */
    public String getAction()
    {
        return (String) deltaStateHelper.eval(ATTR_ACTION);
    }

    public void setAction(String action)
    {
        deltaStateHelper.put(ATTR_ACTION, action);
    }

    /**
     * The type of the drop target. Can be comma separated set or String[] or Collection<String>. <br/>
     * If defined, drags from elements that are generated by MyFaces-Html5 components with hx:dragSource behavior, will
     * be filtered. The drag will be accepted if dropTargetTypes of hx:dragSource is one of the allowed. For the drags
     * that are originated from other elements, this property is ignored. Please see acceptMimeTypes property for
     * accepting/rejecting drags from non-MyFaces-Html5 components.
     */
    public Object getTypes()
    {
        return deltaStateHelper.eval(ATTR_TYPES);
    }

    public void setTypes(Object types)
    {
        deltaStateHelper.put(ATTR_TYPES, types);
    }

    /**
     * If this property is set, only content dropped into this drop zone with defined mime type will be accepted and
     * sent to server-side drop listener. Can be comma separated set or String[] or Collection<String>. <br/>
     * <br/>
     * HTML5 DnD allows us to drop anything into drop zone : files from desktop, images on some other document, etc. So
     * this property is a filter. If value is "*", any content dropped into this zone will be accepted. <br/>
     * <br/>
     * All type info and data of dropped stuff will be sent to dropListener. For example, if value of this property is
     * "*" and we drop some image from any Html page(even not generated by JSF), dropListener will be triggered with the
     * following data:
     * <table border="1">
     * <tr>
     * <td>content-type</td>
     * <td>value</td>
     * </tr>
     * <tr>
     * <td>text/uri-list</td>
     * <td>http://example.org/someImage.png</td>
     * </tr>
     * <tr>
     * <td>Text</td>
     * <td>http://example.org/someImage.png</td>
     * </tr>
     * <tr>
     * <td>text/plain</td>
     * <td>http://example.org/someImage.png</td>
     * </tr>
     * <tr>
     * <td>URL</td>
     * <td>http://example.org/someImage.png</td>
     * </tr>
     * </table>
     * <br/>
     * 
     * Mime type is "text/x-myfaces-html5-dnd-source" for drag&drop events that is generated by MyFaces-Html5 components
     * and that mime type is defined at {@link DropTargetBehaviorRenderer#DEFAULT_MYFACES_MIME_TYPE}. Default value of
     * this property is "text/x-myfaces-html5-dnd-source", thus only MyFaces generated components can be dropped into
     * the drop target.
     */
    // TODO: implement accepting all mime types with supporting '*' for the value.
    public Object getAcceptMimeTypes()
    {
        return deltaStateHelper.eval(ATTR_ACCEPT_MIME_TYPES);
    }

    public void setAcceptMimeTypes(Object acceptMimeTypes)
    {
        deltaStateHelper.put(ATTR_ACCEPT_MIME_TYPES, acceptMimeTypes);
    }

    /**
     * Space separated ids of components to rerender. <br/>
     * Value of this property will be passed through to jsf.ajax.request, thus semantics is same with jsf.ajax.request
     * and f:ajax. Just like those, @all, @this etc. can be used.
     */
    public Object getRerender()
    {
        return deltaStateHelper.eval(ATTR_RERENDER);
    }

    public void setRerender(Object rerender)
    {
        deltaStateHelper.put(ATTR_RERENDER, rerender);
    }

    
    public void setValueExpression(String name, ValueExpression item)
    {
        if (item == null)
        {
            getValueExpressionMap().remove(name);
            deltaStateHelper.remove(name);
        }
        else
        {
            getValueExpressionMap().put(name, item);
        }
    }

    private Map<String, ValueExpression> getValueExpressionMap()
    {
        return _valueExpressions;
    }
    
    public ValueExpression getValueExpression(String name) 
    {
        return getValueExpressionMap().get(name);
    }
    
    @Override
    public void restoreState(FacesContext facesContext, Object o)
    {
        if (o == null)
        {
            return;
        }
        Object[] values = (Object[]) o;
        if (values[0] != null) 
        {
            super.restoreState(facesContext, values[0]);
        }
        deltaStateHelper.restoreState(facesContext, values[1]);
    }

    @Override
    public Object saveState(FacesContext facesContext)
    {
        if (initialStateMarked())
        {
            Object parentSaved = super.saveState(facesContext);
            Object deltaStateHelperSaved = deltaStateHelper.saveState(facesContext);
            
            if (parentSaved == null && deltaStateHelperSaved == null)
            {
                //No values
                return null;
            }   
            return new Object[]{parentSaved, deltaStateHelperSaved};
        }
        else
        {
            Object[] values = new Object[2];
            values[0] = super.saveState(facesContext);
            values[1] = deltaStateHelper.saveState(facesContext);
            return values;
        }
    }
}
